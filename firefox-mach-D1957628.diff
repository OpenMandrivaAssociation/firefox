
# HG changeset patch
# User ahochheiden <ahochheiden@mozilla.com>
# Date 1743556649 0
# Node ID c0faed343035719b07164a465d6f03de5cc6e25b
# Parent  656945d1a18403ec3800cf3d75f7f266a72798eb
Bug 1957628 - Fix 'optional pip install' breakage while maintaining enhanced error output for 'non-optional pip install' r=firefox-build-system-reviewers,sergesanspaille

Differential Revision: https://phabricator.services.mozilla.com/D243902

diff --git a/python/mach/mach/site.py b/python/mach/mach/site.py
--- a/python/mach/mach/site.py
+++ b/python/mach/mach/site.py
@@ -715,19 +715,19 @@ class CommandSiteManager:
         if not os.path.isabs(path):
             path = os.path.join(self._topsrcdir, path)
 
         args = ["--requirement", path]
 
         if require_hashes:
             args.append("--require-hashes")
 
-        install_result = self._virtualenv.pip_install(args)
-
-        if install_result.returncode:
+        try:
+            install_result = self._virtualenv.pip_install(args)
+        except subprocess.CalledProcessError:
             raise InstallPipRequirementsException(
                 f'Failed to install "{path}" into the "{self._site_name}" site.'
             )
 
         check_result = subprocess.run(
             pip_command(python_executable=self.python_path, subcommand="check"),
             stdout=subprocess.PIPE,
             stderr=subprocess.STDOUT,
@@ -1042,36 +1042,42 @@ class PythonVirtualenv:
             install_result = subprocess.run(
                 pip_command(
                     python_executable=self.python_path,
                     subcommand="install",
                     args=pip_install_args,
                 ),
                 **kwargs,
             )
-            return install_result
         except subprocess.CalledProcessError as cpe:
             if not self._quiet:
+                # We print the stdout/stderr on a failed install here so that we don't
+                # need to do it for every code path. We still raise the CalledProcessError
+                # afterward so that the different paths can do their own handling.
                 if cpe.stdout:
                     print(cpe.stdout)
                 if cpe.stderr:
                     print(cpe.stderr, file=sys.stderr)
-            sys.exit(1)
+            raise cpe
+
+        # On one code path we do a 'pip check', and if that fails, having the stdout
+        # of the 'pip install' is helpful for debugging, so we pass it along here so
+        # that we can print later if we hit that scenario.
+        return install_result
 
     def install_optional_packages(self, optional_requirements):
         for requirement in optional_requirements:
             try:
                 self.pip_install_with_constraints([str(requirement.requirement)])
-            except subprocess.CalledProcessError as error:
-                print(
-                    f"{error.output if error.output else ''}"
-                    f"{error.stderr if error.stderr else ''}"
-                    f"Could not install {requirement.requirement.name}, so "
-                    f"{requirement.repercussion}. Continuing."
-                )
+            except subprocess.CalledProcessError:
+                if not self._quiet:
+                    print(
+                        f"Could not install {requirement.requirement.name}, so "
+                        f"{requirement.repercussion}. Continuing."
+                    )
 
     def _resolve_installed_packages(self):
         return _resolve_installed_packages(self.python_path)
 
 
 class RequirementsValidationResult:
     def __init__(self):
         self._package_discrepancies = []

